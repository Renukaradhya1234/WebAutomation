{"version":3,"file":"Background/background.min.js","mappings":"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","sources":["webpack://bundling_files/./BackgroundJS/TabOperations.ts","webpack://bundling_files/./BackgroundJS/Background.ts"],"sourcesContent":["import { INativeCommand, IActionResponse } from \"./BackgroundInterface\";\r\n\r\n\r\nclass TabOperations {\r\n\r\n    async TabAdd(Props: chrome.tabs.CreateProperties, ActionResponse: IActionResponse): Promise<void> {\r\n        await new Promise<void>((Resolve: Function, Reject: Function): void => {\r\n            chrome.tabs.create(Props)\r\n                .then((Message: chrome.tabs.Tab): void => {\r\n                    console.log(\"New Tab Created:- \", Message);\r\n                    ActionResponse.Status = \"Success\";\r\n                    ActionResponse.Reason = \"Tab created\";\r\n                    \r\n                    Resolve();\r\n                })\r\n                .catch((error: any)=>{\r\n                    console.warn(\"error:- \", error);\r\n                    ActionResponse.Status = \"Failed\";\r\n                    ActionResponse.Reason = \"Tab Creation Failed\";\r\n\r\n                    Reject();\r\n                })\r\n        })\r\n    }\r\n\r\n    async TabUpdate(OldURL: string,Props: chrome.tabs.UpdateProperties, ActionResponse: IActionResponse): Promise<void> {\r\n        let Query: chrome.tabs.QueryInfo = {\r\n            url: OldURL\r\n        }\r\n\r\n        await new Promise<void>((Resolve: Function, Reject: Function): void => {\r\n            chrome.tabs.query(Query)\r\n                .then((tabsDetails: chrome.tabs.Tab[]) => {\r\n                    if (tabsDetails.length > 1) {\r\n                        console.warn(\"Multiple tabs found...\", tabsDetails);\r\n                    }\r\n\r\n                    if (tabsDetails.length === 0) {\r\n                        ActionResponse.Status = \"Failed\";\r\n                        ActionResponse.Reason = \"No Tab Found for URL...\";\r\n                        Reject();\r\n                    }\r\n\r\n                    let tabId: number = tabsDetails[0].id;\r\n                    chrome.tabs.update(tabId, Props)\r\n                        .then((Message: chrome.tabs.Tab)=> {\r\n                            console.log(\"updated...\", Message);\r\n\r\n                            ActionResponse.Status = \"Success\";\r\n                            ActionResponse.Reason = \"Tab Updated sucessful...\";\r\n                            Resolve();\r\n                        })\r\n                        .catch((error: any) => {\r\n                            console.warn(\"error while updating the URL:- \", error);\r\n\r\n                            ActionResponse.Status = \"Failed\";\r\n                            ActionResponse.Reason = \"Failed to update tab URL...\";\r\n                            Reject();\r\n                        })\r\n                })\r\n                .catch((error: any): void => {\r\n                    console.warn(\"error while find the URL:- \", error);\r\n                    ActionResponse.Status = \"Failed\";\r\n                    ActionResponse.Reason = \"Failed to find the URL...\";\r\n                    Reject();\r\n                })\r\n        });\r\n    }\r\n\r\n    async TabRemove(URL: string, ActionResponse: IActionResponse): Promise<void> {\r\n        let Query: chrome.tabs.QueryInfo = {\r\n            url: URL\r\n        };\r\n        await new Promise<void>((Resolve: Function, Reject: Function): void => {\r\n            chrome.tabs.query(Query)\r\n                .then((tabsDetails: chrome.tabs.Tab[]): void => {\r\n                    if (tabsDetails.length > 0) {\r\n                        console.warn(\"Multiple tab Found...\");\r\n                    }\r\n\r\n                    if (tabsDetails.length === 0) {\r\n                        ActionResponse.Status = \"Failed\";\r\n                        ActionResponse.Reason = \"No tab found for URL...\";\r\n\r\n                        Reject();\r\n                    }\r\n\r\n                    let tabId: number = tabsDetails[0].id;\r\n\r\n                    chrome.tabs.remove(tabId)\r\n                        .then((): void => {\r\n                            console.log(\"removed:- \", tabsDetails[0]);\r\n\r\n                            ActionResponse.Status = \"Success\";\r\n                            ActionResponse.Reason = \"Tab is Removed...\";\r\n                            Resolve();\r\n                        })\r\n                        .catch((error: any): void => {\r\n                            console.warn(\"error:- \", error);\r\n                            \r\n                            ActionResponse.Status = \"Failed\";\r\n                            ActionResponse.Reason = \"Failed to remove the tab...\";\r\n                            Reject();\r\n                        })\r\n                })  \r\n                .catch((error: any): void => {\r\n                    console.warn(\"error:- \", error);\r\n\r\n                    ActionResponse.Status = \"Failed\";\r\n                    ActionResponse.Reason = \"Failed to found the URL...\";\r\n                    Reject();\r\n                })\r\n        })\r\n    }\r\n\r\n    async TabReload(URL: string, ActionResponse: IActionResponse): Promise<void> {\r\n        let Query: chrome.tabs.QueryInfo = {\r\n            url: URL\r\n        };\r\n\r\n        await new Promise<void>((Resolve: Function, Reject: Function): void => {\r\n            chrome.tabs.query(Query)\r\n                .then((tabsDetails: chrome.tabs.Tab[]): void => {\r\n                    if (tabsDetails.length > 1) {\r\n                        console.warn(\"Multiple tabs Found...\");\r\n                    }\r\n\r\n                    if (tabsDetails.length === 0) {\r\n                        ActionResponse.Status = \"Failed\";\r\n                        ActionResponse.Reason = \"No Tab Found for URL...\";\r\n                        Reject();\r\n                        return;\r\n                    }\r\n\r\n                    let tabId: number = tabsDetails[0].id;\r\n\r\n                    chrome.tabs.reload(tabId)\r\n                        .then((): void => {\r\n                            console.log(\"reloaded...\", tabsDetails[0]);\r\n\r\n                            ActionResponse.Status = \"Success\";\r\n                            ActionResponse.Reason = \"Tab Reloaded Successful...\";\r\n                            Resolve();\r\n                        })\r\n                        .catch((error: any) => {\r\n                            console.warn(\"error while reloading:- \", error);\r\n\r\n                            ActionResponse.Status = \"Failed\";\r\n                            ActionResponse.Reason = \"Failed to Reload tab...\";\r\n                            Reject();\r\n                        })\r\n                })\r\n                .catch((error: any): void => {\r\n                    console.warn(\"error while founding the tab:- \", error);\r\n\r\n                    ActionResponse.Status = \"Failed\";\r\n                    ActionResponse.Reason = \"Failed to Find the tab...\";\r\n                    Reject();\r\n                })\r\n        })\r\n\r\n    }\r\n    \r\n    MessageAnalyzer(NativeCommand: INativeCommand, ActionResponse: IActionResponse): void {\r\n        let Command: string = NativeCommand.Operation;\r\n        \r\n        if (Command === \"create\") {\r\n            if (NativeCommand.Props.URL === \"\") {\r\n                console.warn(\"I need URL to create tab....\");\r\n                ActionResponse.Status = \"Failed\";\r\n                ActionResponse.Reason = \"create tab need URL\";\r\n                return;\r\n            }\r\n\r\n            let Props: chrome.tabs.CreateProperties = {\r\n                url: NativeCommand.Props.URL,\r\n                active: NativeCommand.Props.Active ?? false\r\n            }\r\n\r\n            this.TabAdd(Props, ActionResponse);\r\n        }\r\n        else if (Command === \"update\") {\r\n            if (!NativeCommand.Props.URL && !NativeCommand.Props.NewURL) {\r\n                console.warn(\"I need URLs to update tab....\");\r\n\r\n                ActionResponse.Status = \"Failed\";\r\n                ActionResponse.Reason = \"For update tab URL is needed...\";\r\n                return;\r\n            }\r\n\r\n            let Props: chrome.tabs.UpdateProperties = {\r\n                url: NativeCommand.Props.NewURL,\r\n                active: NativeCommand.Props.Active ?? false\r\n            }\r\n\r\n            this.TabUpdate(NativeCommand.Props.URL, Props, ActionResponse);\r\n        }\r\n        else if (Command === \"remove\") {\r\n            if (!NativeCommand.Props.URL) {\r\n                console.warn(\"I need URL to remove the tab....\");\r\n\r\n                ActionResponse.Status = \"Failed\";\r\n                ActionResponse.Reason = \"To remove tab, URL is needed...\";\r\n                return;\r\n            }\r\n\r\n            this.TabRemove(NativeCommand.Props.URL, ActionResponse);\r\n        }\r\n        else if (Command === \"reload\") {\r\n            if (!NativeCommand.Props.URL) {\r\n                console.warn(\"I need URL to reload the tab....\");\r\n\r\n                ActionResponse.Status = \"Failed\";\r\n                ActionResponse.Reason = \"To reload, URL is needed...\";\r\n                return;\r\n            }\r\n\r\n            this.TabReload(NativeCommand.Props.URL, ActionResponse);\r\n        }\r\n        else {\r\n            console.warn(\"Invalid Operations:- \", NativeCommand);\r\n            \r\n            ActionResponse.Status = \"Failed\";\r\n            ActionResponse.Reason = \"Unknown Tab Operation...\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default TabOperations;","import { INativeCommand, IActionResponse } from \"./BackgroundInterface\";\r\nimport TabOperations from \"./TabOperations\";\r\n\r\nclass BackgroundJS {\r\n    NativeHostPort: chrome.runtime.Port;\r\n    TabPorts: {[key: string]: chrome.runtime.Port};\r\n    ActionResponse: IActionResponse;\r\n    CanISendMessageToNativeHost: boolean;\r\n    tabWorker: TabOperations;\r\n    constructor () {\r\n\r\n        this.NativeHostPort = chrome.runtime.connectNative(\"com.my_native_host\");\r\n        this.TabPorts = {};\r\n        this.ActionResponse = {\r\n            ActionId: \"\",\r\n            SendTo: \"NativeHost\",\r\n            From: \"BackgroundJS\",\r\n            Status: \"\",\r\n            Reason: \"\"\r\n        };\r\n        this.CanISendMessageToNativeHost = false;\r\n        this.tabWorker = new TabOperations();\r\n        this.Main();\r\n    }\r\n\r\n    SendMessageToNativeHost(Message: IActionResponse): void {\r\n        Message.SendTo = \"NativeHost\";\r\n        Message.From = \"BackgroundJS\";\r\n        \r\n        let MessageJson: string = JSON.stringify(Message);\r\n        console.log(\"Sending Message to native host:- \", Message);\r\n        this.NativeHostPort.postMessage(MessageJson);\r\n    }\r\n\r\n    SendMessageToContentJS(tabId: string, Message: INativeCommand): void {\r\n        let Port: chrome.runtime.Port | undefined = this.TabPorts[tabId];\r\n\r\n        if (Port) {\r\n            Message.From = \"BackgroundJS\"\r\n            Message.SendTo = \"ContentJS\"           \r\n            Port.postMessage(Message);\r\n        }\r\n        else {\r\n            console.log(`${tabId} port is not available... retrying after 3 sec`);\r\n            \r\n            /*\r\n                Some time message is received before the tab connected...\r\n                So, retry after 3 seconds...\r\n            */\r\n            \r\n            setTimeout((tabId: string, Message: INativeCommand): void => {\r\n                this.SendMessageToContentJS(tabId, Message);\r\n            }, 3000, tabId, Message);\r\n        }\r\n    }\r\n\r\n    ContentMessageAnalizer(Message: IActionResponse): void {\r\n        if (Message.From === \"ContentJS\" && Message.SendTo === \"BackgroundJS\") {\r\n            if (Message.ActionId === this.ActionResponse.ActionId) {\r\n                if (!this.CanISendMessageToNativeHost) {\r\n                    this.CanISendMessageToNativeHost = true;\r\n                    this.SendMessageToNativeHost(Message);\r\n                }\r\n                else {\r\n                    console.warn(\"ContentMessageAnaliyzer: Message May already sent to native host: \", Message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    BindToPort(PortInfo: chrome.runtime.Port): void {\r\n         // port info\r\n        /*\r\n\r\n         name: Port.name\r\n         onDisconnect: Port.onDisconnect\r\n         postMessage: Port.postMessage \r\n         sender : Port.sender {\r\n            id: chrome extension id\r\n            tab: {\r\n              id: tab id\r\n              url: url of the page\r\n              title: document title  \r\n            }\r\n            url: url of the page\r\n         }\r\n        */\r\n        PortInfo.onMessage.addListener((Message: any) => {\r\n            this.ContentMessageAnalizer(Message);\r\n        })\r\n        this.TabPorts[`${PortInfo.sender.tab.id}`] = PortInfo;\r\n\r\n    }\r\n\r\n    NativeHostMessageAnalyzer(NativeMessage: INativeCommand): void {\r\n        console.log(\"Message received from native Message:- \", NativeMessage);\r\n        this.ActionResponse.ActionId = NativeMessage.ActionId;\r\n        \r\n        if (NativeMessage.SendTo === \"BackgroundJS\") {\r\n            \r\n            if (!this.CanISendMessageToNativeHost) {\r\n                setTimeout((): void => this.NativeHostMessageInitializer(), 7000)\r\n            }\r\n\r\n            if (NativeMessage.From === \"NativeHost\") {\r\n                if (NativeMessage.OperationOn === \"tabs\") {\r\n                    this.tabWorker.MessageAnalyzer(NativeMessage, this.ActionResponse);\r\n                }\r\n                else if (NativeMessage.OperationOn === \"contents\") {\r\n                    if (!NativeMessage.Props.URL) {\r\n                        console.warn(\"I need to URL to perform contents actions...\");\r\n                        this.ActionResponse.Status = \"Failed\";\r\n                        this.ActionResponse.Reason = \"URL is not given...\";\r\n                        this.SendMessageToNativeHost(this.ActionResponse);\r\n                    }\r\n                    else {\r\n                        let Query: chrome.tabs.QueryInfo = {\r\n                            url: NativeMessage.Props.URL\r\n                        };\r\n\r\n                        this.CanISendMessageToNativeHost = false;\r\n\r\n                        chrome.tabs.query(Query)\r\n                            .then((tabsDetails: chrome.tabs.Tab[]): void => {\r\n                                if (tabsDetails.length > 1) {\r\n                                    console.warn(\"Multiple tabs found for URL:- \", Query.url);\r\n                                }\r\n\r\n                                if (tabsDetails.length === 0) {\r\n                                    this.ActionResponse.Status = \"Failed\";\r\n                                    this.ActionResponse.Reason = \"No tabs found for the URL...\";\r\n                                    this.SendMessageToNativeHost(this.ActionResponse);\r\n                                    return;\r\n                                }\r\n\r\n                                let tabId: number = tabsDetails[0].id;\r\n                                this.SendMessageToContentJS(`${tabId}`, NativeMessage);\r\n                            })\r\n                            .catch((error: any): void => {\r\n                                console.warn(\"error while finding the tab:- \", error);\r\n                                this.ActionResponse.Status = \"Failed\";\r\n                                this.ActionResponse.Reason = \"Error while Finding the tab...\";\r\n                                this.SendMessageToNativeHost(this.ActionResponse);\r\n                            })\r\n                    }\r\n                }\r\n                else {\r\n                    console.warn(\"I don't know this action:- \", NativeMessage);\r\n                    this.ActionResponse.Status = \"Failed\";\r\n                    this.ActionResponse.Reason = \"I don't know this action...\";\r\n                    this.SendMessageToNativeHost(this.ActionResponse);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.ActionResponse.Status = \"Failed\";\r\n            this.ActionResponse.Reason = \"This message is not for me!...\";\r\n            this.SendMessageToNativeHost(this.ActionResponse);\r\n        }\r\n    }\r\n\r\n    NativeHostMessageInitializer(): void {\r\n       if (!this.CanISendMessageToNativeHost) {\r\n            this.ActionResponse.Status = \"Failed\";\r\n            this.ActionResponse.Reason = \"Time Out...\";\r\n            this.CanISendMessageToNativeHost = true;\r\n            this.SendMessageToNativeHost(this.ActionResponse);\r\n       } \r\n       else {\r\n        console.warn(\"NativeMessageInitializer: Message may already sent to Native host: \", this.ActionResponse);\r\n        }\r\n    }\r\n\r\n    Main(): void {\r\n\r\n        this.NativeHostPort.onMessage.addListener((NativeCommand: INativeCommand): void => {\r\n            this.NativeHostMessageAnalyzer(NativeCommand);\r\n        })\r\n\r\n        this.NativeHostPort.onDisconnect.addListener((): void => {\r\n            console.log(\"Native Host is disconnected...\");\r\n        })\r\n\r\n        chrome.runtime.onConnect.addListener((Port: chrome.runtime.Port): void => {\r\n            this.BindToPort(Port);\r\n        })\r\n\r\n\r\n        console.log(\"Background JS is Running...\");\r\n    }\r\n}\r\n\r\n\r\nnew BackgroundJS();"],"names":["TabAdd","Props","ActionResponse","Promise","Resolve","Reject","chrome","tabs","create","then","Message","console","log","Status","Reason","catch","error","warn","TabUpdate","OldURL","Query","url","query","tabsDetails","length","tabId","id","update","TabRemove","URL","remove","TabReload","reload","MessageAnalyzer","NativeCommand","Command","Operation","active","Active","this","NewURL","NativeHostPort","runtime","connectNative","TabPorts","ActionId","SendTo","From","CanISendMessageToNativeHost","tabWorker","Main","SendMessageToNativeHost","MessageJson","JSON","stringify","postMessage","SendMessageToContentJS","Port","setTimeout","ContentMessageAnalizer","BindToPort","PortInfo","onMessage","addListener","sender","tab","NativeHostMessageAnalyzer","NativeMessage","NativeHostMessageInitializer","OperationOn","onDisconnect","onConnect"],"sourceRoot":""}